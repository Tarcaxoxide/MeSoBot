#include<main.hpp>
#include<Misskey_Wrapper.hpp>
#include<iostream>
#include <chrono>
#include <thread>


namespace PROGRAM_NAME{

    using namespace std::chrono_literals;
    int main(Arguments_t Arguments){
        Misskey_Wrapper::MisskeyBot_cl Bot("https://sub.domain.tld","Acct","ID");
        Misskey_Wrapper::RequestBody_st MSG;
        MSG.clear();MSG.Data.ApiKey="API_TOKEN";
        
        
        std::deque<Misskey_Wrapper::key_pair> ResponseMatrix;
        
        std::string old_id;
        while(true){
            std::this_thread::sleep_for(1s);
            Bot.notes.global_timeline(MSG);
            
            
            if(MSG.Data.id != old_id){
                std::string mention="";
                bool trig=false;
                for(size_t i=0;i<MSG.Data.mentions_text.size();i++){
                    mention=MSG.Data.mentions_text[i];
                    if(mention.size() > 1 ){
                        if(Bot == mention && MSG.Data.userId != Bot.Id()){
                            MSG.Data.replyId=MSG.Data.id;
                            Bot.notes.create(MSG);
                        }else{
                            if(MSG.Data.replyId != ""){
                                trig=false
                                for(size_t i=0;i<ResponseMatrix.size();i++){
                                    if()
                                }
                            }
                        }
                    }
                }
            }

            { // end of message sets
                old_id=MSG.Data.id;
                MSG.clear();
            }
        }
        
        return 0;
    }
};